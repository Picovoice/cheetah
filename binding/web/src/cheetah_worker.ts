/*
  Copyright 2022 Picovoice Inc.

  You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
  file accompanying this source.

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  specific language governing permissions and limitations under the License.
*/

import { base64ToUint8Array, PvFile } from "@picovoice/web-utils";

import PvWorker from "web-worker:./cheetah_worker_handler.ts";

import {
  CheetahInputConfig,
  CheetahWorkerFlushResponse,
  CheetahWorkerInitRequest,
  CheetahWorkerInitResponse,
  CheetahWorkerProcessResponse,
  CheetahWorkerReleaseResponse,
  CheetahWorkerResponse
} from "./types";

export class CheetahWorker {
  private readonly _worker: Worker;
  private readonly _version: string;
  private readonly _frameLength: number;
  private readonly _sampleRate: number;

  private static _wasm: string;

  private constructor(worker: Worker, version: string, frameLength: number, sampleRate: number) {
    this._worker = worker;
    this._version = version;
    this._frameLength = frameLength;
    this._sampleRate = sampleRate;
  }

  /**
   * Get Cheetah engine version.
   */
  get version(): string {
    return this._version;
  }

  /**
   * Get Cheetah frame length.
   */
  get frameLength(): number {
    return this._frameLength;
  }

  /**
   * Get sample rate.
   */
  get sampleRate(): number {
    return this._sampleRate;
  }

  /**
   * Get Cheetah worker instance.
   */
  get worker(): Worker {
    return this._worker;
  }

  /**
   * Creates a worker instance of the Picovoice Cheetah Speech-to-Text engine using a base64'd string
   * of the model file. The model size is large, hence it will try to use the
   * existing one if it exists, otherwise saves the model in storage.
   *
   * @param accessKey AccessKey generated by Picovoice Console.
   * @param modelBase64 The model in base64 string to initialize Cheetah.
   * @param transcriptionCallback User-defined callback to run after receiving transcription result.
   * @param options Optional configuration arguments.
   * @param options.modelPath The path to save and use the model from. Use different names to use different models
   * across different Cheetah instances.
   * @param options.forceWrite Flag to overwrite the model in storage even if it exists.
   * @param options.endpointDurationSec Duration of endpoint in seconds. A speech endpoint is detected when there is a
   * chunk of audio (with a duration specified herein) after an utterance without any speech in it. Set to `0`
   * to disable endpoint detection.
   * @param options.processErrorCallback User-defined callback invoked if any error happens
   * while processing the audio stream. Its only input argument is the error message.
   *
   * @returns An instance of CheetahWorker.
   */
  public static async fromBase64(
    accessKey: string,
    modelBase64: string,
    transcriptionCallback: (transcription: string, isEndpoint: boolean) => void,
    options: CheetahInputConfig = {}
  ): Promise<CheetahWorker> {
    const {
      modelPath = "cheetah_model",
      forceWrite = false,
      endpointDurationSec = 1.0,
      processErrorCallback
    } = options;

    if (!(await PvFile.exists(modelPath)) || forceWrite) {
      const pvFile = await PvFile.open(modelPath, "w");
      await pvFile.write(base64ToUint8Array(modelBase64));
    }
    return this.create(accessKey, modelPath, endpointDurationSec, transcriptionCallback, processErrorCallback);
  }

  /**
   * Creates a worker instance of the Picovoice Cheetah Speech-to-Text engine using '.pv' file in
   * public directory. The model size is large, hence it will try to use the existing one if it exists,
   * otherwise saves the model in storage.
   *
   * @param accessKey AccessKey generated by Picovoice Console.
   * @param publicPath The relative path to the public directory the server is hosted.
   * @param transcriptionCallback User-defined callback to run after receiving transcription result.
   * @param options Optional configuration arguments.
   * @param options.modelPath The path to save and use the model from. Use different names to use different models
   * across different Cheetah instances.
   * @param options.forceWrite Flag to overwrite the model in storage even if it exists.
   * @param options.endpointDurationSec Duration of endpoint in seconds. A speech endpoint is detected when there is a
   * chunk of audio (with a duration specified herein) after an utterance without any speech in it. Set to `0`
   * to disable endpoint detection.
   * @param options.processErrorCallback User-defined callback invoked if any error happens
   * while processing the audio stream. Its only input argument is the error message.
   *
   * @returns An instance of CheetahWorker.
   */
  public static async fromPublicDirectory(
    accessKey: string,
    publicPath: string,
    transcriptionCallback: (transcription: string, isEndpoint: boolean) => void,
    options: CheetahInputConfig = {}
  ): Promise<CheetahWorker> {
    const {
      modelPath = "cheetah_model",
      forceWrite = false,
      endpointDurationSec = 1.0,
      processErrorCallback
    } = options;

    if (!(await PvFile.exists(modelPath)) || forceWrite) {
      const pvFile = await PvFile.open(modelPath, "w");
      const response = await fetch(publicPath);
      if (!response.ok) {
        throw new Error(`Failed to get model from '${publicPath}'`);
      }
      const data = await response.arrayBuffer();
      await pvFile.write(new Uint8Array(data));
    }
    return this.create(accessKey, modelPath, endpointDurationSec, transcriptionCallback, processErrorCallback);
  }

  /**
   * Set base64 wasm file.
   * @param wasm Base64'd wasm file to use to initialize wasm.
   */
  public static setWasm(wasm: string): void {
    if (this._wasm === undefined) {
      this._wasm = wasm;
    }
  }

  /**
   * Creates a worker instance of the Picovoice Cheetah Speech-to-Text engine.
   * Behind the scenes, it requires the WebAssembly code to load and initialize before
   * it can create an instance.
   *
   * @param accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/)
   * @param modelPath Path to the model saved in indexedDB.
   * @param endpointDurationSec Duration of endpoint in seconds. A speech endpoint is detected when there is a
   * chunk of audio (with a duration specified herein) after an utterance without any speech in it. Set to `0`
   * to disable endpoint detection.
   * @param transcriptionCallback User-defined callback to run after receiving transcription result.
   * @param processErrorCallback User-defined callback invoked if any error happens
   * while processing the audio stream. Its only input argument is the error message.
   *
   * @returns An instance of CheetahWorker.
   */
  private static async create(
    accessKey: string,
    modelPath: string,
    endpointDurationSec: number,
    transcriptionCallback: (transcription: string, isEndpoint: boolean) => void,
    processErrorCallback?: (error: string) => void
  ): Promise<CheetahWorker> {
    const worker = new PvWorker();
    const returnPromise: Promise<CheetahWorker> = new Promise((resolve, reject) => {
      worker.onmessage = (event: MessageEvent<CheetahWorkerInitResponse>): void => {
        switch (event.data.command) {
          case "ok":
            worker.onmessage = (ev: MessageEvent<CheetahWorkerProcessResponse>): void => {
              switch (ev.data.command) {
                case "ok":
                  transcriptionCallback(ev.data.transcription, ev.data.isEndpoint);
                  break;
                case "failed":
                case "error":
                  if (processErrorCallback) {
                    processErrorCallback(ev.data.message);
                  }
                  break;
                default:
                  // @ts-ignore
                  processErrorCallback(`Unrecognized command: ${event.data.command}`);
              }
            };
            resolve(new CheetahWorker(worker, event.data.version, event.data.frameLength, event.data.sampleRate));
            break;
          case "failed":
          case "error":
            reject(event.data.message);
            break;
          default:
            // @ts-ignore
            reject(`Unrecognized command: ${event.data.command}`);
        }
      };
    });

    worker.postMessage({
      command: "init",
      accessKey: accessKey,
      modelPath: modelPath,
      wasm: this._wasm,
      endpointDurationSec: endpointDurationSec
    });

    return returnPromise;
  }

  /**
   * Processes a frame of audio in a worker.
   * The transcription result will be supplied with the callback provided when initializing the worker either
   * by 'fromBase64' or 'fromPublicDirectory'.
   * Can also send a message directly using 'this.worker.postMessage({command: "process", pcm: [...]})'.
   *
   * @param pcm A frame of audio sample.
   */
  public process(pcm: Int16Array): void {
    this._worker.postMessage({
      command: "process",
      pcm: pcm
    });
  }

  /**
   * Flushes internal state of the object, sends a message to the worker to transcribe remaining text.
   * The transcription result will be supplied with the callback provided when initializing the worker either
   * by 'fromBase64' or 'fromPublicDirectory' with 'endpoint=true'.
   * Can also send a message directly using 'this.worker.postMessage({command: "flush"})'.
   */
  public flush(): void {
    this._worker.postMessage({
      command: "flush"
    });
  }

  /**
   * Releases resources acquired by WebAssembly module.
   */
  public release(): Promise<void> {
    const returnPromise: Promise<void> = new Promise((resolve, reject) => {
      this._worker.onmessage = (event: MessageEvent<CheetahWorkerReleaseResponse>): void => {
        switch (event.data.command) {
          case "ok":
            resolve();
            break;
          case "failed":
          case "error":
            reject(event.data.message);
            break;
          default:
            // @ts-ignore
            reject(`Unrecognized command: ${event.data.command}`);
        }
      };
    });

    this._worker.postMessage({
      command: "release"
    });

    return returnPromise;
  }
}
